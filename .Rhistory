write.table(test4, "/Users/yuzhengyan/R/network", sep="\t")
write.table(test4, "/Users/yuzhengyan/R/network", sep=",")
library(xlsx)
write.table(test4, "/Users/yuzhengyan/R/network/foreign.xlsx", sep=",")
write.table(test4, "/Users/yuzhengyan/R/network/foreign.xlsx")
write.table(test4, "/Users/yuzhengyan/R/network/foreign.csv")
write.table(test4, "/Users/yuzhengyan/R/network/foreign.csv", sep=",")
write.table(test4, "/Users/yuzhengyan/R/network/foreign.csv", sep=",", convert = FALSE)
View(unemployment)
?write.table
write.table(test4, "mydata.txt", sep=",")
write.table(test4, "mydata.txt", sep=",", row.names=FALSE)
write.table(test4, "mydata.csv", sep=",", row.names=FALSE)
test
text
knitr::opts_chunk$set(
# mute messages output
message = FALSE
)
library(rvest)
htmlpage <- read_html("https://www.yelp.com/search?find_desc=Burgers&start=0&l=p:MA:Boston::%5BAllston/Brighton,Back_Bay,Beacon_Hill,Downtown,Fenway,South_End,West_End%5D")
htmlpage <- read_html("https://www.yelp.com/search?find_desc=Burgers&start=0&l=p:MA:Boston::%5BAllston/Brighton,Back_Bay,Beacon_Hill,Downtown,Fenway,South_End,West_End%5D")
burgerHtml <- html_nodes(htmlpage,".regular-search-result, .biz-name js-analytics-click")
burgerHtml <- html_nodes(htmlpage,".regular-search-result, .biz-name js-analytics-click")
burger <- html_text(burgerHtml)
burger
knitr::opts_chunk$set(
# mute messages output
message = FALSE,
tidy.opts=list(width.cutoff=60),
tidy=TRUE
)
ratings <-  html_attr('title')
library(tidyverse)
library(tidyverse)
library(readxl)
library(stringr)
library(tidyr)
library(dplyr)
library(splitstackshape)
library(rvest)
htmlpage <- read_html("https://www.yelp.com/search?find_desc=Burgers&start=0&l=p:MA:Boston::%5BAllston/Brighton,Back_Bay,Beacon_Hill,Downtown,Fenway,South_End,West_End%5D")
htmlpage <- read_html("https://www.yelp.com/search?find_desc=Burgers&start=0&l=p:MA:Boston::%5BAllston/Brighton,Back_Bay,Beacon_Hill,Downtown,Fenway,South_End,West_End%5D")
burgerHtml <- html_nodes(htmlpage,".regular-search-result")
ratings <-  html_attr('title')
ratings <-  html_attr(burgerHtml,'title')
ratings
ratings <-  html_attr(htmlpage,'title')
ratings <-  html_attr(burgerHtml,'title')
ratings <-  html_attr(burger,'title')
burgerHtml
ratings <-  html_attr(burgerHtml,'title')
burgerHtml
ratings <-  html_attr(burgerHtml,'title')
burgerHtml[1]
xxxx <- burgerHtml[1]
xxxx
burgerHtml
names(xxxx)
lapply(xxxx, class)
lapply(xxxx, xml_node)
unlist(xxxx)
xxxx
unlist(xxxx)
view(xxxx)
View(xxxx)
data.frame(xxxx)
tidy(xxxx)
str(xxxx)
knitr::opts_chunk$set(
# mute messages output
message = FALSE,
tidy.opts=list(width.cutoff=60),
tidy=TRUE
)
ratings <- htmlpage %>%
html_nodes(".regular-search-result") %>%
html_attr("title")
library(tidyverse)
library(tidyverse)
library(readxl)
library(stringr)
library(tidyr)
library(dplyr)
library(splitstackshape)
library(rvest)
ratings <- htmlpage %>%
html_nodes(".regular-search-result") %>%
html_attr("title")
htmlpage1 <- html("https://www.yelp.com/search?find_desc=Burgers&start=0&l=p:MA:Boston::%5BAllston/Brighton,Back_Bay,Beacon_Hill,Downtown,Fenway,South_End,West_End%5D")
ratings <- htmlpage1 %>%
html_nodes(".regular-search-result") %>%
html_attr("title")
ratings
ratings <- htmlpage1 %>%
html_nodes(".i-stars i-stars--regular-4 rating-large") %>%
html_attr("title")
ratings
ratings <- htmlpage1 %>%
html_nodes("i-stars i-stars--regular-4 rating-large") %>%
html_attr("title")
ratings
ratings <- htmlpage1 %>%
html_nodes(".biz-rating biz-rating-large clearfix") %>%
html_attr("title")
ratings
ratings <- htmlpage1 %>%
html_nodes("biz-rating biz-rating-large clearfix") %>%
html_attr("title")
ratings
ratings <- htmlpage1 %>%
html_nodes(".media-story") %>%
html_attr("title")
ratings
ratings <- htmlpage1 %>%
html_nodes(".biz-rating biz-rating-large clearfix div") %>%
html_attr("title")
ratings <- htmlpage1 %>%
html_nodes("biz-rating biz-rating-large clearfix div") %>%
html_attr("title")
ratings <- htmlpage1 %>%
html_nodes(".biz-rating biz-rating-large clearfix div") %>%
html_attr("title")
ratings <- htmlpage1 %>%
html_nodes(".biz-rating biz-rating-large clearfix") %>%
html_node("div") %>%
html_attr("title")
ratings <-  html_attr(burgerHtml,'title')
ratings <-  html_attr(htmlpage,'title')
ratings <-  html_attr(htmlpage1,'title')
ratings
knitr::opts_chunk$set(
# mute messages output
message = FALSE,
tidy.opts=list(width.cutoff=60),
tidy=TRUE
)
library(RCurl)
library(streamR)
library(twitteR)
library(twitteR)
library(ROAuth)
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
outFile <- "tweets_sample.json"
requestURL        <- "https://api.twitter.com/oauth/request_token"
accessURL         <- "https://api.twitter.com/oauth/access_token"
authURL           <- "https://api.twitter.com/oauth/authorize"
consumerKey       <- "Q8QezKL66qBxuFagb9COpq63p"
consumerSecret    <- "K1Y5MROu5nT9K6A3UdIcUt60NyrURaC9zZJTLrXqlLEU6JBkuV"
accessToken       <- "1389390432-Fhlb7T8w5JoaNdN56Fsa8I4uaTwnK9zdQjRkJtZ"
accessTokenSecret <- "bhmoQlv9IgkBIcsMKkmLUGvYHeAsQrwCfamIXdhjod9Ss"
my_oauth <- OAuthFactory$new( consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
my_oauth$handshake(cainfo="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
my_oauth$handshake(cainfo="cacert.pem")
sampleStream( file=outFile, oauth=my_oauth, tweets=100 )
follow   <- ""
track    <- "Boston,RedSoxs"
location <- c(23.786699, 60.878590, 37.097000, 77.840813)
filterStream( file.name=outFile, follow=follow, track=track, locations=location,
oauth=my_oauth, timeout=5)
rm(list=ls())
fib(a,b)
fib <- function(a=1,b=1){
print(a)
d <- a+b
a <- b
b <- d
if(d>100){
return()}
fib(a,b)
}
View(fib)
function(a=1,b=1){
print(a)
d <- a+b
a <- b
b <- d
if(d>100){
return()}
fib(a,b)
}
fib(a,b)
fib(1,1)
if(d>1000){
return()}
fib <- function(a=1,b=1){
print(a)
d <- a+b
a <- b
b <- d
if(d>1000){
return()}
fib(a,b)
}
fib(1,1)
fib(1,2)
fib <- function(a,b){
print(a)
d <- a+b
a <- b
b <- d
if(d>1000){
return()}
fib(a,b)
}
fib(1,1)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
rm(list = ls())
swirl()
View(pollution)
head(pollution)
dim(pollution)
fivenum(pollution$pm25)
summary(pollution$pm25)
ppm
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
high
low
high
hist(ppm, col="green", breaks="100")
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pollution, col="red")
boxplot(pollution, pm25~region,col="red")
boxplot(pm25~region,col="red")
boxplot(pm25~region,pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution, pm25~region)
subset(pollution, "east")
subset(pollution$east)
subset(pollution,pollution$east)
subset(pollution,"true")
subset(pollution,T)
east <- subset(pollution,region=="east")
head(subset())
head(subset
)
head(east)
hist(east,col="green")
hist(east$pm25,col="green")
hist(subset(pollution,region=="west"),col="green")
hist(subset(pollution,region=="west")$pm25,col="green")
plot(pollution,latitude, pm25)
plot(pollution$latitude, pollution$pm25)
with(pollution, plot(latitude, pm25))
abline(lwd=2, lty=2)
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col)
plot(pollution$latitude, ppm, col="pollution$region")
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1)) now
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
?Devices
(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting), main="Old
| Faithful Geyser data")
with(faithful, plot(eruptions, waiting), main="Old Faithful Geyser data")
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed, dist))
plot(mean(cars$speed), max(cars$dist), "SWIRL rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, c(4,1))
Type xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=T)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis= "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis= "blue", col.lab = "red", main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
par(length
)
length(par())
par()
names(par())
par()$pin
par()$fg
(?pch)
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set = "n")
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
may <- subset(airquality)
may <- subset(airquality, Month==5)
may <- subset(airquality, Month==5)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=17)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
d
d
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow)
par(mfrow=c(1,2))
par(mfrow)
abline(v=median(airquality$Wind),lty=2,lwd=2)
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
rm(list = ls())
setwd("/git/datasciencecoursera/4 Exploratory Data Analy")
setwd("/git/datasciencecoursera/4 Exploratory Data Analysis")
setwd("/Users/yuzhengyan/git/datasciencecoursera/4\ Exploratory\ Data\ Analysis")
setwd("/Users/yuzhengyan/git/datasciencecoursera/4\ Exploratory\ Data\ Analysis/ExData_Plotting1")
data <- read.table(file = "household_power_consumption.txt", header = TRUE)
View(data)
data <- read.table(file = "household_power_consumption.txt", sep=";",header = TRUE)
View(data)
strptime(data$Date, format = "%d-%m-%Y")
newData <- subset(data, Date = "01/02/2017" | Date = "02/02/2017")
newData <- subset(data, Date == "01/02/2017" | Date == "02/02/2017")
data <- read.table(file = "household_power_consumption.txt", sep=";",header = TRUE) %>% as.Date(data$Date)
library(tidyverse)
data <- read.table(file = "household_power_consumption.txt", sep=";",header = TRUE) %>% as.Date(data$Date)
data <- as.Date(data$Date)
data <- read.table(file = "household_power_consumption.txt", sep=";",header = TRUE)
data <- read.table(file = "household_power_consumption.txt", sep=";",header = TRUE,na.strings="?")
newData <- subset(data, Date == "01/02/2007" | Date == "02/02/2007")
View(data)
head(data)
newData <- subset(data, Date == 01/02/2007 | Date == 02/02/2007)
newData <- subset(data, Date == "1/2/2007" | Date == "2/2/2007")
hist(newData$Global_active_power)
hist(newData$Global_active_power, xlab = "Global Active Power")
title(main = "Global Active Power")
hist(newData$Global_active_power, xlab = "Global Active Power", )
title(main = "Global Active Power")
hist(newData$Global_active_power, xlab = "Global Active Power", main = "Global Active Power")
hist(newData$Global_active_power, xlab = "Global Active Power", main = "Global Active Power", col = "red")
hist(newData$Global_active_power, xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red")
hist(newData$Global_active_power, xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red", cex.sub=0.8)
hist(newData$Global_active_power, xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red")
dev.copy(png,'plot1.png')
dev.off()
setwd("/Users/yuzhengyan/git/datasciencecoursera/4\ Exploratory\ Data\ Analysis/ExData_Plotting1")
newData$Date <- as.Date(newData$Date, format="%d/%m/%Y")
View(newData)
dateTime <- paste(newData$Date, newData$Time)
View(newData)
data$DateTime <- as.POSIXct(dateTime)
newData$DateTime <- as.POSIXct(dateTime)
View(newData)
dev.copy(png,'plot1.png', height=480, width=480)
dev.off()
plot(newData$Global_active_power~newData$DateTime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
plot(newData$Global_active_power~newData$DateTime, type="l", ylab="Global Active Power (kilowatts)")
plot(newData$Global_active_power~newData$DateTime, ylab="Global Active Power (kilowatts)", xlab="")
plot(newData$Global_active_power~newData$DateTime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
dev.copy(png,'plot2.png', height=480, width=480)
dev.off()
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=1,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), cex=0.8)
d
with(newData, {
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="", cex=0.8)
lines(Sub_metering_2~DateTime, col='Red')
lines(Sub_metering_3~DateTime, col='Blue')
})
View(newData)
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
with(newData, {
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="", cex=0.8)
lines(Sub_metering_2~DateTime, col='Red')
lines(Sub_metering_3~DateTime, col='Blue')
})
with(newData, {
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~DateTime, col='Red')
lines(Sub_metering_3~DateTime, col='Blue')
})
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="", cex=0.8)
with(newData, {
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="", cex=0.8)
lines(Sub_metering_2~DateTime, col='Red')
lines(Sub_metering_3~DateTime, col='Blue')
})
plot(Sub_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
with(newData, {
plot(Sub_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_2~DateTime, col='Red')
lines(Sub_3~DateTime, col='Blue')
})
with(newData, {
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~DateTime, col='Red')
lines(Sub_metering_3~DateTime, col='Blue')
})
dev.copy(png,'plot3.png', height=480, width=480)
dev.off()
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=1,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=1,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),bty = "n")
with(newData, {
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~DateTime, col='Red')
lines(Sub_metering_3~DateTime, col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=1,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),bty = "n")
with(newData, {
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~DateTime, col='Red')
lines(Sub_metering_3~DateTime, col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=1,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png,'plot3.png', height=480, width=480)
dev.off()
with(newData, {
plot(Global_active_power~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="", cex=0.8)
plot(Voltage~DateTime, type="l",
ylab="Voltage (volt)", xlab="", cex=0.8)
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="", cex=0.8)
lines(Sub_metering_2~DateTime,col='Red')
lines(Sub_metering_3~DateTime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), cex=0.5)
plot(Global_reactive_power~DateTime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="", cex=0.8)
})
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(newData, {
plot(Global_active_power~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="", cex=0.8)
plot(Voltage~DateTime, type="l",
ylab="Voltage (volt)", xlab="", cex=0.8)
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="", cex=0.8)
lines(Sub_metering_2~DateTime,col='Red')
lines(Sub_metering_3~DateTime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), cex=0.5)
plot(Global_reactive_power~DateTime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="", cex=0.8)
})
dev.copy(png,'plot4.png', height=480, width=480)
dev.off()
